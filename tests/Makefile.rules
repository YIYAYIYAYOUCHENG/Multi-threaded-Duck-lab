#
# This file is part of duck-lab.
# 
# Copyright (c) 
# 2012 - Christian Nastasi, Claudio Salvadori 
#
# duck-lab is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# duck-lab is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301  USA
#
################################################################################
#  duck-lab Tests: (recursive) Rules Makefile 
#
#  author(s): Christian Nastasi (c.nastasi@sssup.it, nastasichr@gmail.com) 
#             Claudio Salvadori (c.salvadori@sssup.it)
#  version:   1.0 
#  date:      February 2012
################################################################################

##########################
# Automatic lists

APP_FILES	:= ${SRC_FILES:%.cpp=%.bin}
OBJ_FILES  	:= ${SRC_FILES:%.cpp=%.o}
DEP_FILES	:= $(patsubst %.cpp,%.d,$(SRC_FILES))

CURRENT_DIR	:= $(shell pwd)
TEST_NAMES	:= ${SRC_FILES:%.cpp=%}
TEST_NAMES_2	:= ${SRC_FILES:$(CURRENT_DIR)/%.cpp=%}


##########################
# Dependencies variables

# Add .d to make's recognized suffixes
SUFFIXES 	+= .d .bin
#List of targets not requiring deps
NODEPS		:= recursive_clean 


##########################
# Others

FILE_CLASSNAME 	= $(patsubst $(shell pwd)/%, %, $(patsubst %.cpp,%,$<)) 


##########################
# Makefile Rules 

.PHONY: binaries subdirs recursive_tests exec_tests_default test_subdirs recursive_clean clean_subdirs 

# NOTE: This is the entry rules. Should be always here

binaries: $(APP_FILES) subdirs

subdirs: 
	@echo "MAKE SUBDIR $(SUB_DIRS)"
	@for i in $(SUB_DIRS); do\
	    if [ ! -d $$i ]; then\
	        echo "SKIPPING (not existing)" $$i;\
	        continue;\
	    fi;\
	    cd $$i; \
	    MAIN_DIR="$(MAIN_DIR)"\
	    DUCK_DIR="$(DUCK_DIR)"\
	    MAKEOPT="$(MAKEOPT)"\
	    CXX="$(CXX)"\
	    CXXOPT="$(CXXOPT)"\
	    LD="$(LD)"\
	    CXXFLAGS="$(CXXFLAGS)"\
	    LDFLAGS="$(LDFLAGS)"\
	    make $(MAKEOPT);\
	    cd -;\
	done;

recursive_tests: exec_tests test_subdirs 

exec_tests_default:
	@echo "Running Tests (default rule)" 
	@for i in $(TEST_NAMES_2); do\
	    echo -n "TESTING $$i ... ";\
	    echo -n "TESTING $$i ... " >> $(MAIN_DIR)/$(TEST_LOG_FILE); \
            ./$$i.bin $$i.xml > $$i.log;\
	    retv=$$?;\
            echo -n " exit_status=" $$retv " " ;\
            echo -n " exit_status=" $$retv " " >> $(MAIN_DIR)/$(TEST_LOG_FILE);\
	    if [ $$retv != 0 ]; then\
	        echo "ERROR";\
	        echo "ERROR" >> $(MAIN_DIR)/$(TEST_LOG_FILE);\
	    else\
	        echo "OK";\
	        echo "OK" >> $(MAIN_DIR)/$(TEST_LOG_FILE);\
	    fi;\
	done

test_subdirs: 
	@echo "MAKE SUBDIR $(SUB_DIRS)"
	@for i in $(SUB_DIRS); do\
	    if [ ! -d $$i ]; then\
	        echo "SKIPPING (not existing)" $$i;\
	        continue;\
	    fi;\
	    cd $$i; \
	    MAIN_DIR="$(MAIN_DIR)"\
	    DUCK_DIR="$(DUCK_DIR)"\
	    TEST_LOG_FILE="$(TEST_LOG_FILE)"\
	    MAKEOPT="$(MAKEOPT)"\
	    CXX="$(CXX)"\
	    CXXOPT="$(CXXOPT)"\
	    LD="$(LD)"\
	    CXXFLAGS="$(CXXFLAGS)"\
	    LDFLAGS="$(LDFLAGS)"\
	    make $(MAKEOPT) recursive_tests;\
	    cd -;\
	done;

recursive_clean:: clean_subdirs
	rm -rf *.o *.d *.bin *.log

clean_subdirs: 
	@echo "MAKE CLEAN SUBDIR $(SUB_DIRS)"
	@for i in $(SUB_DIRS); do\
	    if [ ! -d $$i ]; then\
	        echo "SKIPPING (not existing)" $$i;\
	        continue;\
	    fi;\
	    cd $$i; \
	    MAIN_DIR="$(MAIN_DIR)"\
	    DUCK_DIR="$(DUCK_DIR)"\
	    MAKEOPT="$(MAKEOPT)"\
	    make recursive_clean;\
	    cd -;\
	done;

################################################
#       Overriding Implict Build Rule          #
################################################
ifdef DUCK_VERBOSE
%.o : %.cpp %.d 
	$(CXX) $(CXXOPT) -c $(CXXFLAGS) $< -o $@
%.bin: %.o
	$(LD) $(LDFLAGS) $< -o $@
else
%.o : %.cpp %.d 
	@$(CXX) $(CXXOPT) -c $(CXXFLAGS) $< -o $@
	@echo CXX $(FILE_CLASSNAME) 
%.bin: %.o
	@$(LD) $(LDFLAGS) $< -o $@
	@echo BIN $(patsubst $(shell pwd)/%, %, $@)
endif

# This is the rule for creating the dependency files
ifdef DUCK_VERBOSE
%.d: %.cpp
	$(CXX) $(CXXOPT) $(CXXFLAGS) -MM -MT '$(patsubst %.cpp,%.o,$<)' $< > $@
else
%.d: %.cpp
	@$(CXX) $(CXXOPT) $(CXXFLAGS) -MM -MT '$(patsubst %.cpp,%.o,$<)' $< > $@
	@echo DEP $(FILE_CLASSNAME)
endif
################################################


#############################
# Dependency files inclusion

#Don't create dependencies when we're cleaning, for instance
ifeq (0, $(words $(findstring $(MAKECMDGOALS), $(NODEPS))))
-include $(DEP_FILES)
endif
