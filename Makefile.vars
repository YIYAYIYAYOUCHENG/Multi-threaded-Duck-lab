#
# This file is part of duck-lab.
# 
# Copyright (c) 
# 2012 - Christian Nastasi, Claudio Salvadori 
#
# duck-lab is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# duck-lab is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301  USA
#
################################################################################
#  duck-lab Variables Makefile 
#
#  author(s): Christian Nastasi (c.nastasi@sssup.it, nastasichr@gmail.com) 
#             Claudio Salvadori (c.salvadori@sssup.it)
#  version:   1.0 
#  date:      February 2012
################################################################################

include $(DUCK_DIR)/Makefile.conf

##########################
# Makefile functions
clean_path 	= $(abspath $(subst ~/, $(HOME)/, $(dir $1/dummy)))
get_last_dir 	= $(notdir $(patsubst %/, %, $(call clean_path, $1)))
list_files 	= $(notdir $(shell if [ -e $1 ]; then ls $1/*; fi))
variable_has 	= $(if $(filter $2,$1),true,)
variable_has_only = $(if $(filter-out $2,$1),,true)

##########################
# Installation section 
DUCK_DIR		:= $(call clean_path, $(DUCK_DIR))
DUCK_INSTALL_PREFIX	:= $(call clean_path, $(DUCK_INSTALL_PREFIX))

##########################
# Installation section 
DUCK_INSTALL_DIR 	:= $(DUCK_INSTALL_PREFIX)/duck-lab/
DUCK_INSTALL_INC	:= $(DUCK_INSTALL_PREFIX)/include/
DUCK_INSTALL_LIB	:= $(DUCK_INSTALL_PREFIX)/lib/
DUCK_INSTALL_BIN	:= $(DUCK_INSTALL_PREFIX)/bin/

##########################
# Main Directories section 
BIN_DIR	 	:= $(DUCK_DIR)/bin/
LIB_DIR	 	:= $(DUCK_DIR)/lib/
APP_DIR 	:= $(DUCK_DIR)/apps/
DATA_DIR 	:= $(DUCK_DIR)/data/
TEST_DIR 	:= $(DUCK_DIR)/tests/
EXAMPLE_DIR 	:= $(DUCK_DIR)/examples/

##########################
# Lib Directories section 

DUCK_THREADS_LIB_DIR	:= $(DUCK_DIR)/duck_threads_lib/
DUCK_CORE_LIB_DIR	:= $(DUCK_DIR)/duck_core_lib/
DUCK_IO_LIB_DIR		:= $(DUCK_DIR)/duck_io_lib/
DUCK_STORAGE_LIB_DIR	:= $(DUCK_DIR)/duck_storage_lib/
DUCK_RENDER_LIB_DIR	:= $(DUCK_DIR)/duck_render_lib/
DUCK_ALGO_LIB_DIR	:= $(DUCK_DIR)/duck_algo_lib/

DUCK_ALL_LIB_DIRS 	:= $(DUCK_CORE_LIB_DIR) 
DUCK_ALL_LIB_DIRS 	+= $(DUCK_THREADS_LIB_DIR) 
DUCK_ALL_LIB_DIRS 	+= $(DUCK_IO_LIB_DIR) 
DUCK_ALL_LIB_DIRS 	+= $(DUCK_STORAGE_LIB_DIR)
#DUCK_ALL_LIB_DIRS 	+= $(DUCK_RENDER_LIB_DIR)

########################## 
# Tool-chain Option

CXX 		:= g++ 
LD		:= g++
STRIP		:= strip
DOXYGEN 	:= doxygen

CXXOPT		:= -Werror -Wall -pipe -fPIC $(DUCK_CXXOPT)
CXXFLAGS 	:= $(DUCK_USE_NAMESPACE) 
LDFLAGS 	:= 
DOXYGEN_CONFIG 	:= Doxyfile


##########################
# Make Options

ifdef DUCK_VERBOSE
MAKEOPT         :=
MAKEVERBOSE	:= 
else
MAKEOPT         := -s --no-print-directory
MAKEVERBOSE	:= @
endif


###################################
# General Make (global) variables

BUILD_LOG_FILE		:= .DuckLastBuild.log
CFG_FILE		:= DuckConfig.h
INC_DIRS		:= $(DUCK_DIR)
DUCK_ENABLES_LIST	:= 


###################################
# Configure BUILT TYPE

ifndef DUCK_BUILD_TYPE
DUCK_BUILD_TYPE = DEBUG_VERBOSE
endif 
DUCK_BUILD_TYPE_DEFINED := false

# BUILD TYPE = RELEASE
ifeq ($(call variable_has, $(DUCK_BUILD_TYPE), RELEASE), true)
DUCK_BUILD_TYPE_DEFINED := true
DUCK_ENABLES_LIST	+= "DUCK_WARNING_LEVEL 1"
DUCK_ENABLES_LIST	+= "DUCK_LOG_LEVEL 1"
endif

# BUILD TYPE = RELEASE_VERBOSE:
ifeq ($(call variable_has, $(DUCK_BUILD_TYPE), RELEASE_VERBOSE), true)
ifeq ($(DUCK_BUILD_TYPE_DEFINED), true)
$(error "DUCK_BUILD_TYPE variable defines multiple types: " $(DUCK_BUILD_TYPE))
endif
DUCK_BUILD_TYPE_DEFINED := true
DUCK_ENABLES_LIST	+= "DUCK_WARNING_LEVEL 2"
DUCK_ENABLES_LIST	+= "DUCK_LOG_LEVEL 2"
endif

# BUILD TYPE = RELEASE_VERBOSE:  DEBUG
ifeq ($(call variable_has, $(DUCK_BUILD_TYPE), DEBUG), true)
ifeq ($(DUCK_BUILD_TYPE_DEFINED), true)
$(error "DUCK_BUILD_TYPE variable defines multiple types: " $(DUCK_BUILD_TYPE))
endif
DUCK_BUILD_TYPE_DEFINED := true
DUCK_ENABLES_LIST	+= "DUCK_WARNING_LEVEL 1"
DUCK_ENABLES_LIST	+= "DUCK_DEBUG_LEVEL 1"
DUCK_ENABLES_LIST	+= "DUCK_LOG_LEVEL 1"
CXXOPT			+= -g
endif

# BUILD TYPE = RELEASE_VERBOSE:  DEBUG_VERBOSE
ifeq ($(call variable_has, $(DUCK_BUILD_TYPE), DEBUG_VERBOSE), true)
ifeq ($(DUCK_BUILD_TYPE_DEFINED), true)
$(error "DUCK_BUILD_TYPE variable defines multiple types: " $(DUCK_BUILD_TYPE))
endif
DUCK_BUILD_TYPE_DEFINED := true
DUCK_ENABLES_LIST	+= "DUCK_WARNING_LEVEL 2"
DUCK_ENABLES_LIST	+= "DUCK_DEBUG_LEVEL 2"
DUCK_ENABLES_LIST	+= "DUCK_LOG_LEVEL 2"
CXXOPT			+= -g
endif

ifeq ($(DUCK_BUILD_TYPE_DEFINED), false)
$(error "DUCK_BUILD_TYPE variable defines invalid type: " $(DUCK_BUILD_TYPE))
endif

###################################
# Include libraries variables 

include $(DUCK_THREADS_LIB_DIR)/Makefile.vars
include $(DUCK_CORE_LIB_DIR)/Makefile.vars
include $(DUCK_IO_LIB_DIR)/Makefile.vars
include $(DUCK_STORAGE_LIB_DIR)/Makefile.vars
#include $(DUCK_RENDER_LIB_DIR)/Makefile.vars


##############################################
# Include libraries variables (INCLUDE DIRS) 

DUCK_THREADS_LIB_INC	:= $(patsubst %, $(DUCK_THREADS_LIB_DIR)/%, $(DUCK_THREADS_INC_DIRS)) 
DUCK_CORE_LIB_INC	:= $(patsubst %, $(DUCK_CORE_LIB_DIR)/%, $(DUCK_CORE_INC_DIRS)) 
DUCK_IO_LIB_INC 	:= $(patsubst %, $(DUCK_IO_LIB_DIR)/%, $(DUCK_IO_INC_DIRS)) 
DUCK_STORAGE_LIB_INC 	:= $(patsubst %, $(DUCK_STORAGE_LIB_DIR)/%, $(DUCK_STORAGE_INC_DIRS)) 
#DUCK_RENDER_LIB_INC 	:= $(patsubst %, $(DUCK_RENDER_LIB_DIR)/%, $(DUCK_RENDER_INC_DIRS)) 

DUCK_ALL_LIB_INC	:= $(DUCK_CORE_LIB_INC)
DUCK_ALL_LIB_INC	+= $(DUCK_THREADS_LIB_INC)
DUCK_ALL_LIB_INC	+= $(DUCK_IO_LIB_INC)
DUCK_ALL_LIB_INC	+= $(DUCK_STORAGE_LIB_INC)
#DUCK_ALL_LIB_INC	+= $(DUCK_RENDER_LIB_INC)


##############################################
# Include libraries variables (LD FLAGS) 
DUCK_THREADS_LIB_LDFLAGS		:= -L$(LIB_DIR) -l$(DUCK_THREADS_LIB_SHORT)
DUCK_CORE_LIB_LDFLAGS		:= -L$(LIB_DIR) -l$(DUCK_CORE_LIB_SHORT)
DUCK_IO_LIB_LDFLAGS		:= -L$(LIB_DIR) -l$(DUCK_IO_LIB_SHORT)
DUCK_STORAGE_LIB_LDFLAGS	:= -L$(LIB_DIR) -l$(DUCK_STORAGE_LIB_SHORT)
#DUCK_RENDER_LIB_LDFLAGS	:= -L$(LIB_DIR) -l$(DUCK_RENDER_LIB_SHORT)

DUCK_ALL_LIB_LDFLAGS		:= $(DUCK_CORE_LIB_LDFLAGS)
DUCK_ALL_LIB_LDFLAGS		+= $(DUCK_THREADS_LIB_LDFLAGS)
DUCK_ALL_LIB_LDFLAGS		+= $(DUCK_IO_LIB_LDFLAGS)
DUCK_ALL_LIB_LDFLAGS		+= $(DUCK_STORAGE_LIB_LDFLAGS)
#DUCK_ALL_LIB_LDFLAGS		+= $(DUCK_RENDER_LIB_LDFLAGS)

##############################################
# Distribution C and LD FLAGS 
DUCK_DISTRIB_CFLAGS 	:= $(foreach v, $(DUCK_ALL_LIB_INC), $(call clean_path, $(patsubst $(DUCK_DIR)/%, $(DUCK_INSTALL_INC)/%, $(v))))
DUCK_DISTRIB_CFLAGS 	:= $(DUCK_USE_NAMESPACE) ${DUCK_DISTRIB_CFLAGS:%=-I%}

DUCK_LDFLAGS_ONLY_LIBNAMES 	:= $(filter-out -L%, $(DUCK_ALL_LIB_LDFLAGS))
DUCK_DISTRIB_LDFLAGS 		:= -L$(DUCK_INSTALL_LIB) $(DUCK_LDFLAGS_ONLY_LIBNAMES)
