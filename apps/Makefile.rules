#
# This file is part of duck-lab.
# 
# Copyright (c) 
# 2012 - Christian Nastasi, Claudio Salvadori 
#
# duck-lab is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# duck-lab is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301  USA
#
################################################################################
#
#  DUCK Makefile 
#
#  Version 0.1 
#  Mon Apr 12 2010 15:21 
#  Copyright  2010  Claudio Salvadori, Christian Nastasi 
#  c.salvadori@sssup.it
#  c.nastasi@sssup.it
#
################################################################################

################################################################################
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Library General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
################################################################################

##########################
# Automatic lists

APP_FILES	:= ${SRC_FILES:%.cpp=%.bin}
OBJ_FILES  	:= ${SRC_FILES:%.cpp=%.o}
DEP_FILES	:= $(patsubst %.cpp,%.d,$(SRC_FILES))


##########################
# Dependencies variables

# Add .d to make's recognized suffixes
SUFFIXES 	+= .d .bin
#List of targets not requiring deps
NODEPS		:= recursive_clean 


##########################
# Others

FILE_CLASSNAME 	= $(patsubst $(shell pwd)/%, %, $(patsubst %.cpp,%,$<)) 


##########################
# Makefile Rules 

# NOTE: This is the entry rules. Should be always here

binaries: $(APP_FILES) subdirs
	@for i in $(notdir $(basename $(APP_FILES))); do\
	    mv $$i.bin $(INSTALL_DIR)/$$i; \
	done;

subdirs: 
	@echo "MAKE SUBDIR $(SUB_DIRS)"
	@for i in $(SUB_DIRS); do\
	    if [ ! -d $$i ]; then\
	        echo "SKIPPING (not existing)" $$i;\
	        continue;\
	    fi;\
	    cd $$i; \
	    MAIN_DIR="$(MAIN_DIR)"\
	    DUCK_DIR="$(DUCK_DIR)"\
	    MAKEOPT="$(MAKEOPT)"\
	    CXX="$(CXX)"\
	    LD="$(LD)"\
	    CXXFLAGS="$(CXXFLAGS)"\
	    LDFLAGS="$(LDFLAGS)"\
	    INSTALL_DIR="../$(INSTALL_DIR)" \
	    make $(MAKEOPT);\
	    cd -;\
	done;

recursive_clean: clean_subdirs
	rm -rf *.o *.d *.bin

clean_subdirs: 
	@echo "MAKE CLEAN SUBDIR $(SUB_DIRS)"
	@for i in $(SUB_DIRS); do\
	    if [ ! -d $$i ]; then\
	        echo "SKIPPING (not existing)" $$i;\
	        continue;\
	    fi;\
	    cd $$i; \
	    MAIN_DIR="$(MAIN_DIR)"\
	    DUCK_DIR="$(DUCK_DIR)"\
	    MAKEOPT="$(MAKEOPT)"\
	    make recursive_clean;\
	    cd -;\
	done;

################################################
#       Overriding Implict Build Rule          #
################################################
ifdef DUCK_VERBOSE
%.o : %.cpp %.d 
	$(CXX) $(CXXOPT) -c $(CXXFLAGS) $< -o $@
%.bin: %.o
	$(LD) $< -o $@ $(LDFLAGS) -lxerces-c
else
%.o : %.cpp %.d 
	@$(CXX) $(CXXOPT) -c $(CXXFLAGS) $< -o $@
	@echo CXX $(FILE_CLASSNAME) 
%.bin: %.o
	@$(LD) $< -o $@ $(LDFLAGS) -lxerces-c
	@echo BIN $(patsubst $(shell pwd)/%, %, $@)
endif

# This is the rule for creating the dependency files
ifdef DUCK_VERBOSE
%.d: %.cpp
	$(CXX) $(CXXOPT) $(CXXFLAGS) -MM -MT '$(patsubst %.cpp,%.o,$<)' $< > $@
else
%.d: %.cpp
	@$(CXX) $(CXXOPT) $(CXXFLAGS) -MM -MT '$(patsubst %.cpp,%.o,$<)' $< > $@
	@echo DEP $(FILE_CLASSNAME)
endif
################################################


#############################
# Dependency files inclusion

#Don't create dependencies when we're cleaning, for instance
ifeq (0, $(words $(findstring $(MAKECMDGOALS), $(NODEPS))))
-include $(DEP_FILES)
endif
